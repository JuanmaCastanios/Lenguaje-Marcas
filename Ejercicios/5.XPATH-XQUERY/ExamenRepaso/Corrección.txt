1. Incrementa el precio de todos los productos de alimentación o de ocio un 10%.

for $prod in //productos/producto[seccion = "alimentación" or seccion = "ocio"]
let $oldPrecio := $prod/precio
return update value $prod/precio with $oldPrecio * 1.1


for $prod in //productos/producto
let $tipo:=$prod/seccion
return if (($tipo="ocio") or ($tipo="alimentación"))
then
update value $prod/precio with data($prod/precio)*1.1
else()


2. Queremos mostrar en formato tabla HTML, la sección de cada producto y la descripción, de manera que se muestren agrupadas las diferente secciones, es decir, primero las de deporte, las siguientes filas de la tabla ropa, etc.... Ej. formato de salida:

<html>
    <body>
        <table>
            <tr>
                <td>deporte</td>
                <td>Primis in faucibus. Ut id nulla ac sapien suscipit tristique ac volutpat risus.Phasellus vitae ligula commodo, dictum lorem sit amet, imperdiet ex. Etiam cursus porttitor tincidunt. Vestibulum ante ipsumprimis in faucibus orci luctus et ultrices posuere cubilia Curae</td>
            </tr>

.....................

        </table>
    </body>
</html>


(: Con doble for :)

<html><body><table>{

for $sec in distinct-values(//producto/seccion)

for $prod in //producto[seccion=$sec]

return <tr><td>{$prod/seccion}</td><td>{$prod/descripcion}</td></tr>

}</table></body></html>


(: Con un solo for :)

<html><body><table>{

for $prod in //producto

order by $prod/seccion

return <tr><td>{$prod/seccion}</td><td>{$prod/descripcion}</td></tr>

}</table></body></html>




No es la opción de agrupación que decía, pero bien:

<html>
	<body>
		<table>
			{
				for $seccion in distinct-values(//productos/producto/seccion)
				return <tr>
					<td>{$seccion}</td>
					{
					for $desc in //productos/producto[seccion=$seccion]/descripcion
					return <td>{$desc/text()}</td>

				}</tr>
			}
		</table>
	</body>
</html>


3. Para todas las ventas, añade un nuevo nodo que será con nombre id_venta y como valor, la concatenación del id_producto e id_comprador separados por un guión. Ejemplo:

    <venta>
        <id_producto>1</id_producto>
        <id_comprador>1</id_comprador>
        <cantidad>75</cantidad>
        <precio_unidad>42</precio_unidad>
    </venta>

Surgirá:

    <venta>

        <id_venta>1-1</id_venta>

        <id_producto>1</id_producto>
        <id_comprador>1</id_comprador>
        <cantidad>75</cantidad>
        <precio_unidad>42</precio_unidad>
    </venta>



for $venta in /ventas/venta 
let $id := concat($venta/id_producto, "-", $venta/id_comprador)
return update insert <id_venta>{data($id)}</id_venta> into $venta


for $ven in //ventas/venta
let $idprod:=$ven/id_producto
let $idcom:=$ven/id_comprador
return update insert <id_venta>{concat($idprod,'-',$idcom)}</id_venta> preceding $ven/id_producto


4. ¿Cuantos hombres y mujeres hay por cada país? Ejemplo de formato de salida:

United States-MALE-333
United States-FEMALE-444
Canada-MALE-32
Canada-FEMALE-45


for $pais in distinct-values(/compradores//pais)
for $genero in distinct-values(//comprador//data(@genero))
let $personas := count(//comprador[pais=$pais and @genero=$genero])
return concat($pais, '-', $genero, '-', $personas)



for $comp in distinct-values(/compradores/comprador/pais)
let $hombres:=count(/compradores/comprador[@genero="MALE" and pais=$comp])
let $mujeres:=count(/compradores/comprador[@genero="FEMALE" and pais=$comp])
return (concat($comp, "-MALE-", $hombres), concat($comp, "-FEMALE-", $mujeres))




for $gen in distinct-values (//compradores/comprador/@genero)
let $paishombre:=//comprador[@genero="MALE"]
let $paismujer:=//comprador[@genero="FEMALE"]
for $paises in distinct-values (//compradores/comprador/pais)
return if ($gen="MALE")
then
concat($paises,'-',count($paishombre))
else if ($gen="FEMALE")
then
concat($paises,'-',count($paismujer))
else ()


5. Cambia el nombre del nodo de precio_unidad en todo el fichero de ventas, por pvp y la cantidad aparecerá en € , es decir, a la cantidad numérica existente debes añadirle el símbolo €.

for $v in //venta
let $precio := $v/precio_unidad
return (
	update value $precio with concat($precio, '€'),
	update rename $precio as 'pvp'
)



for $venta in //ventas/venta
let $cambiar_nombre:= update rename //ventas/venta/precio_unidad as 'pvp'
return update value $venta/pvp with concat($venta/pvp/text(),'€')



6. Queremos saber cual ha sido el gasto total (sabiendo que el gasto individual de cada compra es cantidad * precio_unidad) por cada uno de los compradores que han comprado, es decir, la suma de todas las compras de cada uno de los compradores.

Formato de salida:

<venta>
    <id_comprador>1</id_comprador>
    <gasto>xxxx</gasto>
</venta>
<venta>
    <id_comprador>2</id_comprador>
    <gasto>xxxx</gasto>
</venta>

........................

for $c in //comprador return
<venta>
	<id_comprador>{data($c/@id)}</id_comprador>
	<gasto>
	{sum(
			for $v in //venta[id_comprador=$c/@id]
		   	let $gasto := $v/cantidad * $v/precio_unidad
		   	return $gasto
   	)}
   	</gasto>
</venta>

for $com in distinct-values(/compradores/comprador/@id)
let $suma:=sum(//venta[id_comprador=$com]/(cantidad*precio_unidad))
return
<venta>
  <id_comprador>{data($com)}</id_comprador>
  <gasto>{$suma}</gasto>
</venta>




for $comprador in distinct-values(//venta/id_comprador)
for $ventas in //venta[id_comprador=$comprador]
let $gasto:=($ventas/cantidad*$ventas/precio_unidad)
return <venta><id_comprador>{$comprador}</id_comprador><gasto>{$gasto}</gasto></venta>



7.- Crea dentro de las ventas, por cada venta, un nuevo campo que tenga el total de la factura (surge de multiplicar cantidad por el precio_unidad de cada venta).

for $venta in /ventas/venta
let $precio:= $venta/precio_unidad* $venta/cantidad
return update insert <factura>{data($precio)}</factura> into $venta



for $ven in //ventas/venta
let $cantidad:=$ven/cantidad
let $precio:=$ven/precio_unidad
let $total:=$cantidad*$precio
return update insert <total_factura>{$total}</total_factura> following $ven/precio_unidad




